from typing import Union

import numpy as np
import networkx as nx
import matplotlib
import matplotlib.pyplot as plt

from color_hierarchy.color_node import ColorNode


class ColorHierarchyTree:
    """
    Tree for representing the color hierarchy generated by the refinement process of Gradual Weisfeiler Leman.

    Parameters
    ----------
    root_node : ColorNode
        A ColorNode instance representing the root node of the hierarchy tree

    is_root_node_artificial : bool
        Signifies whether the root node is artificial. A root node is artificial when the nodes of a graph are
        labeled and has more than one label

    """

    def __init__(self, root_node: ColorNode, is_root_node_artificial: bool) -> None:
        self.root_node = root_node
        self.is_root_node_artificial = is_root_node_artificial

    def get_leaves(self) -> list[ColorNode]:

        """
        Returns the leaf nodes of the tree.

        Returns
        -------
        out : list[ColorNode]
            A list of ColorNode instances which are leaf nodes of the tree

        """

        return ColorHierarchyTree.__get_tree_leaves(self.root_node)

    def get_last_color(self) -> int:

        """
        Returns the color of the last ColorNode added to the tree.

        Returns
        -------
        out : int
            The color represented as integer

        """

        return max(ColorHierarchyTree.__get_all_colors(self.root_node))

    def generate_edge_list(self) -> list[tuple]:

        """
        Returns the list of edges of the color hierarchy tree.

        Returns
        -------
        out : list[tuple]
            A list of tuples, where each tuple contains 2 vertices signifying an edge between these vertices

        """

        return ColorHierarchyTree.__generate_edge_list(self.root_node)

    def generate_tree_level_to_node_mapping(self) -> dict:

        """
        Returns the position of the node in the tree hierarchy/ at which level is the node in the tree. Mainly used
        for tree visualization.

        Returns
        -------
        out : dict
            Mapping of node positions in the tree

        """

        node_depth_mapping = self.__generate_node_to_depth_mapping(self.root_node, None)

        level_node_mapping = {level: list() for level in sorted(set(node_depth_mapping.values()))}

        for node, depth in node_depth_mapping.items():
            level_node_mapping[depth].extend([node])

        return level_node_mapping

    def print_tree(self) -> None:

        """
        Prints the tree in hierarchical order.

        """

        ColorHierarchyTree.__print_tree(starting_node=self.root_node, pos=0)

    def visualize_tree(self) -> None:

        """
        Visualizes the generated color hierarchy tree. If the root node is artificial then it is colored white.
        Currently only supports hierarchy tree with 48 distinct color nodes. If the tree has more than 48 color nodes,
        then a uniform color is used.

        """

        tree_graph = nx.Graph(self.generate_edge_list())

        # Colors, currently max 50 is supported
        color_pool = list()

        n_vertices = color_required = len(tree_graph.nodes)

        if n_vertices > 48:
            print("Warning: Currently only 48 distinct colors are available for representing nodes in the "
                  "color hierarchy tree. \nThis tree has more than 48 nodes, thus a uniform color is used.")

            if self.is_root_node_artificial:
                color_pool.append((1.0, 1.0, 1.0, 1.0))
                color_required -= 1

            color_pool.extend(["skyblue"] * color_required)

        else:

            available_colors = list()
            available_colors.extend([matplotlib.colormaps["Paired"](i) for i in range(12)])
            available_colors.extend([matplotlib.colormaps["Dark2"](i) for i in range(8)])
            available_colors.extend([matplotlib.colormaps["tab20"](i) for i in range(20)])
            available_colors.extend([matplotlib.colormaps["Accent"](i) for i in range(8)])

            color_pool_mapping = {node: available_colors[node] for node in sorted(tree_graph.nodes)}

            if self.is_root_node_artificial:
                color_pool_mapping[0] = (1.0, 1.0, 1.0, 1.0)

            color_pool = [color_pool_mapping[node] for node in tree_graph.nodes]

        # generate hierarchical positions
        level_to_node_mapping = self.generate_tree_level_to_node_mapping()

        node_positions = dict()

        for level, nodes in level_to_node_mapping.items():

            if level == 0:
                node_positions[nodes[0]] = (0, 0)
            else:
                vertical_coordinates = np.linspace(-level, level, len(nodes))

                for node, vertical_coordinate in zip(nodes, vertical_coordinates):
                    node_positions[node] = (vertical_coordinate, -level)

        nx.draw(tree_graph, with_labels=True, pos=node_positions, node_color=color_pool)
        plt.show()

    @staticmethod
    def __get_tree_leaves(node: ColorNode) -> list[ColorNode]:

        """
        Utility method for generating tree leaves.

        """

        if len(node.children) == 0:
            return [node]
        else:
            leaves = list()
            for n in node.children:
                leaves.extend(ColorHierarchyTree.__get_tree_leaves(n))

            return leaves

    @staticmethod
    def __get_all_colors(node: ColorNode) -> list[int]:

        """
        Utility method for generating a list containing all the nodes' color.

        """

        if len(node.children) == 0:
            return [node.color]
        else:
            colors = list()
            for n in node.children:
                colors.extend(ColorHierarchyTree.__get_all_colors(n))

            return colors

    @staticmethod
    def __generate_edge_list(node: ColorNode) -> list[tuple]:

        """
        Utility method for generating edge list of the color hierarchy tree.

        """

        if len(node.children) == 0:
            return list()

        edges = list()

        for child in node.children:
            edges.append((node.color, child.color))
            edges.extend(ColorHierarchyTree.__generate_edge_list(child))

        return edges

    def __generate_node_to_depth_mapping(self, node: ColorNode, parent_depth: Union[int, None]) -> dict:

        """
        Utility method for generating depth of each node in the color hierarchy tree.

        """

        node_height_mapping = dict()

        depth = 0 if node == self.root_node else parent_depth + 1
        node_height_mapping[node.color] = depth

        for child in node.children:
            node_height_mapping.update(self.__generate_node_to_depth_mapping(child, depth))

        return node_height_mapping

    @staticmethod
    def __print_tree(starting_node: ColorNode, pos: int) -> None:

        """
        Utility method for printing the tree hierarchically.

        """

        print(("|".join(["\t"] * pos) + "|" + "".join(["-"] * pos)) if pos != 0 else "", starting_node, sep="")

        for node in starting_node.children:
            ColorHierarchyTree.__print_tree(node, pos=pos + 1)
